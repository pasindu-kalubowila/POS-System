package GUI;

import Model.Access_Denied;
import Database.DB;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.io.File;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.PrinterName;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.view.JasperViewer;

public class SalesHistory extends javax.swing.JFrame {

    private Main menu;
    private String user_Type;
    private final DecimalFormat decimalformat = new DecimalFormat("00.00");

    public SalesHistory() {
        initComponents();
        tableSettings();
        loadTableData();
    }

    public SalesHistory(Main me, String userType) {
        this();
        this.menu = me;
        this.user_Type = userType;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btn_Print = new javax.swing.JButton();
        btn_viewInvoice = new javax.swing.JButton();
        txt_Search = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1166, 768));
        setPreferredSize(new java.awt.Dimension(1166, 768));

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setMaximumSize(new java.awt.Dimension(1166, 768));
        panel.setMinimumSize(new java.awt.Dimension(1166, 768));
        panel.setPreferredSize(new java.awt.Dimension(1166, 768));
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(null);

        table.setAutoCreateRowSorter(true);
        table.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Invoice No", "Date", "Customer", "Value", "Payment Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setOpaque(false);
        table.setRowHeight(25);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(40);
            table.getColumnModel().getColumn(1).setPreferredWidth(200);
            table.getColumnModel().getColumn(2).setPreferredWidth(200);
            table.getColumnModel().getColumn(3).setPreferredWidth(300);
            table.getColumnModel().getColumn(4).setPreferredWidth(180);
            table.getColumnModel().getColumn(5).setPreferredWidth(200);
        }

        panel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 1120, 500));

        btn_Print.setBackground(new java.awt.Color(179, 182, 183));
        btn_Print.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Print.setText("Print");
        btn_Print.setBorder(null);
        btn_Print.setBorderPainted(false);
        btn_Print.setContentAreaFilled(false);
        btn_Print.setFocusPainted(false);
        btn_Print.setOpaque(true);
        btn_Print.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_PrintMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_PrintMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_PrintMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_PrintMouseReleased(evt);
            }
        });
        btn_Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PrintActionPerformed(evt);
            }
        });
        panel.add(btn_Print, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 90, 110, 30));

        btn_viewInvoice.setBackground(new java.awt.Color(41, 128, 185));
        btn_viewInvoice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_viewInvoice.setForeground(new java.awt.Color(255, 255, 255));
        btn_viewInvoice.setText("View");
        btn_viewInvoice.setBorder(null);
        btn_viewInvoice.setBorderPainted(false);
        btn_viewInvoice.setContentAreaFilled(false);
        btn_viewInvoice.setFocusPainted(false);
        btn_viewInvoice.setOpaque(true);
        btn_viewInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_viewInvoiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_viewInvoiceMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_viewInvoiceMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_viewInvoiceMouseReleased(evt);
            }
        });
        btn_viewInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewInvoiceActionPerformed(evt);
            }
        });
        panel.add(btn_viewInvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 90, 110, 30));

        txt_Search.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_Search.setForeground(new java.awt.Color(39, 55, 70));
        txt_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_SearchKeyReleased(evt);
            }
        });
        panel.add(txt_Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 350, 35));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(52, 73, 94));
        jLabel2.setText("Sales History");
        panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 360, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 768, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_PrintMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_PrintMouseEntered
        btn_Print.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_PrintMouseEntered

    private void btn_PrintMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_PrintMouseExited
        btn_Print.setBackground(new Color(179, 182, 183));
    }//GEN-LAST:event_btn_PrintMouseExited

    private void btn_PrintMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_PrintMousePressed
        btn_Print.setBackground(new Color(98, 101, 103));
    }//GEN-LAST:event_btn_PrintMousePressed

    private void btn_PrintMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_PrintMouseReleased
        btn_Print.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_PrintMouseReleased

    private void btn_viewInvoiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewInvoiceMouseEntered
        btn_viewInvoice.setBackground(new Color(31, 97, 141));
    }//GEN-LAST:event_btn_viewInvoiceMouseEntered

    private void btn_viewInvoiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewInvoiceMouseExited
        btn_viewInvoice.setBackground(new Color(41, 128, 185));
    }//GEN-LAST:event_btn_viewInvoiceMouseExited

    private void btn_viewInvoiceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewInvoiceMousePressed
        btn_viewInvoice.setBackground(new Color(21, 67, 96));
    }//GEN-LAST:event_btn_viewInvoiceMousePressed

    private void btn_viewInvoiceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_viewInvoiceMouseReleased
        btn_viewInvoice.setBackground(new Color(31, 97, 141));
    }//GEN-LAST:event_btn_viewInvoiceMouseReleased

    private void btn_viewInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewInvoiceActionPerformed

        if (user_Type.equals("Admin") | user_Type.equals("Manager")) {
            if (table.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "First select a invoice", "Select invoice", JOptionPane.WARNING_MESSAGE);
            } else {
                InvoiceView view = new InvoiceView();
                view.setVisible(true);
                view.viewInvoiceData(table.getValueAt(table.getSelectedRow(), 1).toString());
            }

        } else if (user_Type.equals("Cashier") | user_Type.equals("DataEntry")) {
            Access_Denied ad = new Access_Denied();
            JOptionPane.showMessageDialog(this, ad.panel, "Acess Denied", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_btn_viewInvoiceActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked

        if (user_Type.equals("Admin") | user_Type.equals("Manager")) {
            if (evt.getClickCount() == 2) {
                getInvoiceType(table.getValueAt(table.getSelectedRow(), 1).toString());
            }

        } else if (user_Type.equals("Cashier") | user_Type.equals("DataEntry")) {
            Access_Denied ad = new Access_Denied();
            JOptionPane.showMessageDialog(menu, ad.panel, "Acess Denied", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void txt_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_SearchKeyReleased
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        try {
            ResultSet rs = DB.search("SELECT invoice.id_invoice, invoice.`date`, customer.fname, customer.lname, invoice.net_total,"
                    + " invoice.payment_type FROM invoice INNER JOIN customer ON invoice.id_customer=customer.id_customer"
                    + " WHERE invoice.id_invoice like '%" + txt_Search.getText() + "%' OR invoice.`date` like '%" + txt_Search.getText() + "%' ");

            int rowNo = 0;
                dtm.setRowCount(0);
            while (rs.next()) {
                Vector v = new Vector();
                v.add(++rowNo);
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(" " + rs.getString(3) + " " + rs.getString(4));
                v.add(decimalformat.format(rs.getDouble(5)));
                v.add(rs.getString(6));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (txt_Search.getText().isEmpty()) {
            dtm.setRowCount(0);
            loadTableData();
        }
    }//GEN-LAST:event_txt_SearchKeyReleased

    private void btn_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PrintActionPerformed
        if (user_Type.equals("Admin") | user_Type.equals("Manager")) {

            if (table.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "First Select a Invoice", "Select Incoice", JOptionPane.WARNING_MESSAGE);
            } else {
                String invNo = table.getValueAt(table.getSelectedRow(), 1).toString();
                try {
                    ResultSet rs = DB.search("SELECT type FROM invoice WHERE id_invoice = '" + invNo + "' ");
                    if (rs.next()) {
                        if ("Normal".equals(rs.getString(1))) {
                            printNormalInvoice(invNo);
                        } else {
                            printDigitalPrintingInvoice(invNo);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } else if (user_Type.equals("Cashier") | user_Type.equals("DataEntry")) {
            Access_Denied ad = new Access_Denied();
            JOptionPane.showMessageDialog(this, ad.panel, "Acess Denied", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_btn_PrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Print;
    private javax.swing.JButton btn_viewInvoice;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JPanel panel;
    private javax.swing.JTable table;
    private javax.swing.JTextField txt_Search;
    // End of variables declaration//GEN-END:variables

    private void tableSettings() {
        JTableHeader tableHeader = table.getTableHeader();
        tableHeader.setFont(new Font("Calibri", Font.BOLD, 14));
        ((DefaultTableCellRenderer) tableHeader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer right = new DefaultTableCellRenderer();
        right.setHorizontalAlignment(JLabel.RIGHT);

        table.getColumnModel().getColumn(0).setCellRenderer(center);
        table.getColumnModel().getColumn(2).setCellRenderer(center);
        table.getColumnModel().getColumn(5).setCellRenderer(center);
        table.getColumnModel().getColumn(4).setCellRenderer(right);
    }

    private void loadTableData() {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        try {
            ResultSet rs = DB.search("SELECT invoice.id_invoice, invoice.`date`, customer.fname, customer.lname, invoice.net_total, invoice.payment_type "
                    + "FROM invoice INNER JOIN customer ON invoice.id_customer=customer.id_customer");

            int rowNo = 0;
            while (rs.next()) {
                Vector v = new Vector();
                v.add(++rowNo);
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(" " + rs.getString(3) + " " + rs.getString(4));
                v.add(decimalformat.format(rs.getDouble(5)));
                v.add(rs.getString(6));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getInvoiceType(String invNo) {
        try {
            ResultSet rs = DB.search("SELECT type FROM invoice WHERE id_invoice = '" + invNo + "' ");
            if (rs.next()) {
                if ("Normal".equals(rs.getString(1))) {
                    InvoiceView view = new InvoiceView();
                    view.setVisible(true);
                    view.viewInvoiceData(invNo);
                } else {
                    Invoice_DigitalPrinting_View inv=new Invoice_DigitalPrinting_View();
                    inv.setVisible(true);
                    inv.viewInvoiceData(invNo);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printNormalInvoice(String invNo) {
        menu.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            ResultSet rs = DB.search("SELECT invoice.id_invoice,CONCAT(customer.fname,\" \",customer.lname) AS customer_name,\n"
                    + "CAST(invoice.`date` AS char) AS `date`,\n"
                    + "CAST(invoice.`time` AS char) AS `time`,\n"
                    + "v.cash_payments AS cash,\n"
                    + "v.card_payments AS card,\n"
                    + "v.credit_payment AS credit,\n"
                    + "FORMAT(invoice.subtotal,2) AS subtotal,\n"
                    + "FORMAT(invoice.discount,2) AS discount,\n"
                    + "FORMAT(invoice.net_total,2) AS net_total,\n"
                    + "FORMAT(invoice.paid_amount,2) AS paid_amount,\n"
                    + "FORMAT(invoice.balance,2) AS balance\n"
                    + "FROM invoice\n"
                    + "INNER JOIN customer ON invoice.id_customer=customer.id_customer\n"
                    + "INNER JOIN various_payments v on invoice.id_invoice=v.invoice_id\n"
                    + "WHERE invoice.id_invoice='" + invNo + "'");

            String subReportpath = "";
            String path ="";

            if (rs.next()) {
                path = "jasperReports\\invoice_small_various.jrxml";

                String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
                subReportpath = (s.split("invoice_small_various.jrxml"))[0];
            } else {
                path = "jasperReports\\invoice_small.jrxml";

                String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
                subReportpath = (s.split("invoice_small.jrxml"))[0];
            }
            Map<String, Object> m = new HashMap();
            m.put("subPath", subReportpath); // send subReport path
            m.put("invoice_no", invNo);
            m.put("isPrintCopy", "Print Copy");

            JasperReport cp = JasperCompileManager.compileReport(path);
            JasperPrint fr = JasperFillManager.fillReport(cp, m, DB.getConnection());
//            JasperViewer.viewReport(fr, false);
            PrintReportToPrinter(fr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        menu.setCursor(null);
    }
    
    private void PrintReportToPrinter(JasperPrint jp) throws JRException {
        // TODO Auto-generated method stub
        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
        // printRequestAttributeSet.add(MediaSizeName.ISO_A4); //setting page size
        printRequestAttributeSet.add(new Copies(1));

        PrinterName printerName = new PrinterName("FK80 Printer", null); //gets printer 

        PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();
        printServiceAttributeSet.add(printerName);

        JRPrintServiceExporter exporter = new JRPrintServiceExporter();

        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jp);
        exporter.setParameter(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
        exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
        exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
        exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
        exporter.exportReport();
    }

    private void printDigitalPrintingInvoice(String invNo) {
        menu.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String path = "jasperReports\\Invoice_Printing.jrxml";

            String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
            String subReportpath = (s.split("Invoice_Printing.jrxml"))[0];

            Map<String, Object> m = new HashMap();
            m.put("subPath", subReportpath); // send subReport path
            m.put("invoice_no", invNo);
            m.put("isPrintCopy", "Print Copy");
            
            JasperReport cp = JasperCompileManager.compileReport(path);
            JasperPrint fr = JasperFillManager.fillReport(cp, m, DB.getConnection());
            JasperViewer.viewReport(fr, false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        menu.setCursor(null);
    }
}
