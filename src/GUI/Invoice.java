package GUI;

import Database.DB;
import Model.Exit_Warning;
import Model.Save;
import Model.Validation;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.PrinterName;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.view.JasperViewer;

public class Invoice extends javax.swing.JFrame {

    private final DecimalFormat decimalformat = new DecimalFormat("00.00");
    private final SimpleDateFormat dateFomrmat = new SimpleDateFormat("yyyy-MM-dd");

    private Main menu;
    private String customerId;

    private String stock_id;
    private String product_id;
    private String product_name;
    private String product_unit;
    private double retailPrice;
    private double quantity;
    private double sub_total = 0;
    private boolean inv_print = false;
    public static double cash_pay = 0;
    public static double card_pay = 0;
    public static double credit_pay = 0;
    int rowNo = 0;

    public Invoice() {
        initComponents();
        generateID();
        tableSettings();
        cus_namejScrollPane1.setVisible(false);
        pr_codejScrollPane1.setVisible(false);
        txt_fulldiscount.setEditable(false);
        productCode.grabFocus();
        customerId = "000001";
    }

    public Invoice(Main m) {
        this();
        this.menu = m;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel = new javax.swing.JPanel();
        pr_codejScrollPane1 = new javax.swing.JScrollPane();
        pr_codejList1 = new javax.swing.JList<>();
        cus_namejScrollPane1 = new javax.swing.JScrollPane();
        cus_namejList1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        productCode = new javax.swing.JTextField();
        txt_subTotal = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txt_Discount = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txt_netTotal = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        paidAmount = new javax.swing.JTextField();
        btn_Cancel = new javax.swing.JButton();
        btn_Save = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        productName = new javax.swing.JLabel();
        unitProduct = new javax.swing.JLabel();
        checkAvailability = new javax.swing.JLabel();
        btn_find = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        add_customer = new javax.swing.JButton();
        invoice_ID = new javax.swing.JLabel();
        pay_type = new javax.swing.JComboBox<>();
        customer_Name = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txt_fulldiscount = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setMaximumSize(new java.awt.Dimension(824, 768));
        panel.setMinimumSize(new java.awt.Dimension(824, 768));
        panel.setPreferredSize(new java.awt.Dimension(824, 768));
        panel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                panelFocusLost(evt);
            }
        });
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pr_codejList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pr_codejList1MouseClicked(evt);
            }
        });
        pr_codejList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pr_codejList1KeyPressed(evt);
            }
        });
        pr_codejScrollPane1.setViewportView(pr_codejList1);

        panel.add(pr_codejScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 300, -1));

        cus_namejList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cus_namejList1MouseClicked(evt);
            }
        });
        cus_namejList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cus_namejList1KeyPressed(evt);
            }
        });
        cus_namejScrollPane1.setViewportView(cus_namejList1);

        panel.add(cus_namejScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 300, -1));

        jScrollPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        table.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Stock ID", "Product Code", "Product Name", "Unit", "Quantity", "Price", "Discount", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setGridColor(new java.awt.Color(204, 204, 204));
        table.setRowHeight(30);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableMouseEntered(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(40);
            table.getColumnModel().getColumn(1).setPreferredWidth(100);
            table.getColumnModel().getColumn(2).setPreferredWidth(130);
            table.getColumnModel().getColumn(3).setPreferredWidth(300);
            table.getColumnModel().getColumn(4).setPreferredWidth(86);
            table.getColumnModel().getColumn(5).setPreferredWidth(100);
            table.getColumnModel().getColumn(7).setPreferredWidth(120);
            table.getColumnModel().getColumn(8).setPreferredWidth(171);
        }

        panel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 1120, 310));

        jLabel25.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(66, 73, 73));
        jLabel25.setText("Product Code");
        panel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 90, 25));

        productCode.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        productCode.setForeground(new java.awt.Color(39, 55, 70));
        productCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeActionPerformed(evt);
            }
        });
        productCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productCodeKeyReleased(evt);
            }
        });
        panel.add(productCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 300, 25));

        txt_subTotal.setEditable(false);
        txt_subTotal.setBackground(new java.awt.Color(255, 255, 255));
        txt_subTotal.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_subTotal.setForeground(new java.awt.Color(39, 55, 70));
        txt_subTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_subTotal.setText("0");
        panel.add(txt_subTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 510, 200, 30));

        jLabel28.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(66, 73, 73));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Sub Total");
        panel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 60, 30));

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(66, 73, 73));
        jLabel6.setText("Payement Type");
        panel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 610, 110, 25));

        jLabel34.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(66, 73, 73));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Discount  (Rs)");
        panel.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 100, 30));

        txt_Discount.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_Discount.setForeground(new java.awt.Color(39, 55, 70));
        txt_Discount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_Discount.setText("0");
        txt_Discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_DiscountActionPerformed(evt);
            }
        });
        txt_Discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyTyped(evt);
            }
        });
        panel.add(txt_Discount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 200, 30));

        jLabel36.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(66, 73, 73));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Net Total");
        panel.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 630, 60, 30));

        txt_netTotal.setEditable(false);
        txt_netTotal.setBackground(new java.awt.Color(255, 255, 255));
        txt_netTotal.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_netTotal.setForeground(new java.awt.Color(39, 55, 70));
        txt_netTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_netTotal.setText("0");
        panel.add(txt_netTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 630, 200, 30));

        jLabel37.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(66, 73, 73));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Paid");
        panel.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 520, 60, 30));

        paidAmount.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        paidAmount.setForeground(new java.awt.Color(39, 55, 70));
        paidAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        paidAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidAmountActionPerformed(evt);
            }
        });
        paidAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidAmountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                paidAmountKeyTyped(evt);
            }
        });
        panel.add(paidAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 520, 230, 30));

        btn_Cancel.setBackground(new java.awt.Color(179, 182, 183));
        btn_Cancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_Cancel.setText("Cancel");
        btn_Cancel.setBorder(null);
        btn_Cancel.setBorderPainted(false);
        btn_Cancel.setContentAreaFilled(false);
        btn_Cancel.setFocusPainted(false);
        btn_Cancel.setOpaque(true);
        btn_Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_CancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_CancelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_CancelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_CancelMouseReleased(evt);
            }
        });
        btn_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CancelActionPerformed(evt);
            }
        });
        panel.add(btn_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 660, 100, 30));

        btn_Save.setBackground(new java.awt.Color(38, 57, 75));
        btn_Save.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_Save.setForeground(new java.awt.Color(255, 255, 255));
        btn_Save.setText("PAY");
        btn_Save.setBorder(null);
        btn_Save.setBorderPainted(false);
        btn_Save.setContentAreaFilled(false);
        btn_Save.setFocusPainted(false);
        btn_Save.setOpaque(true);
        btn_Save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_SaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_SaveMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_SaveMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_SaveMouseReleased(evt);
            }
        });
        btn_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SaveActionPerformed(evt);
            }
        });
        panel.add(btn_Save, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 660, 100, 30));

        jLabel38.setFont(new java.awt.Font("Calibri", 1, 17)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 153, 51));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Balance");
        panel.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 560, 60, 40));

        balance.setEditable(false);
        balance.setBackground(new java.awt.Color(255, 255, 255));
        balance.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        balance.setForeground(new java.awt.Color(39, 55, 70));
        balance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        balance.setText("0.00");
        panel.add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 560, 230, 40));

        productName.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        productName.setForeground(new java.awt.Color(0, 153, 102));
        productName.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panel.add(productName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 490, 25));

        unitProduct.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        unitProduct.setForeground(new java.awt.Color(0, 0, 153));
        unitProduct.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panel.add(unitProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 130, 60, 25));

        checkAvailability.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        checkAvailability.setForeground(new java.awt.Color(0, 0, 153));
        panel.add(checkAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 130, 160, 25));

        btn_find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/find_1.png"))); // NOI18N
        btn_find.setBorderPainted(false);
        btn_find.setFocusPainted(false);
        btn_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_findActionPerformed(evt);
            }
        });
        panel.add(btn_find, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, 26, 26));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(52, 73, 94));
        jLabel2.setText("Invoice");
        panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 130, 50));

        jLabel24.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(66, 73, 73));
        jLabel24.setText("Customer");
        panel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 80, 25));

        add_customer.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        add_customer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/add_cus.png"))); // NOI18N
        add_customer.setToolTipText("Add New Customer");
        add_customer.setContentAreaFilled(false);
        add_customer.setFocusPainted(false);
        add_customer.setMargin(new java.awt.Insets(2, 2, 2, 2));
        add_customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_customerActionPerformed(evt);
            }
        });
        panel.add(add_customer, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, 30, 40));

        invoice_ID.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        invoice_ID.setForeground(new java.awt.Color(153, 0, 0));
        invoice_ID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        panel.add(invoice_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, 220, 30));

        pay_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Card", "Credit", "Various" }));
        pay_type.setMaximumSize(new java.awt.Dimension(41, 32));
        pay_type.setMinimumSize(new java.awt.Dimension(41, 32));
        pay_type.setPreferredSize(new java.awt.Dimension(41, 32));
        pay_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pay_typeActionPerformed(evt);
            }
        });
        panel.add(pay_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 610, 230, 25));

        customer_Name.setText("Default");
        customer_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customer_NameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customer_NameKeyReleased(evt);
            }
        });
        panel.add(customer_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 300, 30));

        jButton1.setBackground(new java.awt.Color(0, 153, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Full");
        jButton1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 255)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 70, 30));

        txt_fulldiscount.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_fulldiscount.setForeground(new java.awt.Color(39, 55, 70));
        txt_fulldiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_fulldiscount.setText("0");
        txt_fulldiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_fulldiscountActionPerformed(evt);
            }
        });
        txt_fulldiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_fulldiscountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_fulldiscountKeyTyped(evt);
            }
        });
        panel.add(txt_fulldiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 590, 200, 30));

        jLabel35.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(66, 73, 73));
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Full Discount  (Rs)");
        panel.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 120, 30));

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1170, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_CancelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseReleased
        btn_Cancel.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_CancelMouseReleased

    private void btn_CancelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMousePressed
        btn_Cancel.setBackground(new Color(98, 101, 103));
    }//GEN-LAST:event_btn_CancelMousePressed

    private void btn_CancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseExited
        btn_Cancel.setBackground(new Color(179, 182, 183));
    }//GEN-LAST:event_btn_CancelMouseExited

    private void btn_CancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseEntered
        btn_Cancel.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_CancelMouseEntered

    private void txt_DiscountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyTyped
        Validation.setDigitsOnly(evt);
        Validation.setLength(evt, txt_Discount.getText(), 3);
        if (Character.isLetter(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_DiscountKeyTyped

    private void paidAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyTyped
        Validation.setLength(evt, paidAmount.getText(), 10);
        if (Character.isLetter(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_paidAmountKeyTyped

    private void txt_DiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyReleased
        if (!txt_subTotal.getText().isEmpty() && !txt_Discount.getText().isEmpty()) {
            if (Double.parseDouble(txt_Discount.getText()) > 101) {
                getNetTotal();
            }
        }
    }//GEN-LAST:event_txt_DiscountKeyReleased

    private void txt_DiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_DiscountActionPerformed
        paidAmount.grabFocus();
    }//GEN-LAST:event_txt_DiscountActionPerformed

    private void paidAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyReleased
        if (!paidAmount.getText().isEmpty()) {
            double netValue = Double.parseDouble(txt_netTotal.getText());
            double paid = Double.parseDouble(paidAmount.getText());
            balance.setText(decimalformat.format(paid - netValue));
        }
    }//GEN-LAST:event_paidAmountKeyReleased

    private void productCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCodeActionPerformed
        if (!productCode.getText().isEmpty()) {
            productData(productCode.getText());
        }
    }//GEN-LAST:event_productCodeActionPerformed

    private void btn_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_findActionPerformed
        SearchProduct sp = new SearchProduct(menu, this);
        sp.setVisible(true);
    }//GEN-LAST:event_btn_findActionPerformed

    private void paidAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidAmountActionPerformed
        if (!paidAmount.getText().isEmpty()) {
            double netValue = Double.parseDouble(txt_netTotal.getText());
            double paid = Double.parseDouble(paidAmount.getText());
            balance.setText(decimalformat.format(paid - netValue));
            btn_Save.grabFocus();
        }
    }//GEN-LAST:event_paidAmountActionPerformed

    private void btn_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CancelActionPerformed
        clearAlll();
        productCode.setText(null);
        productName.setText(null);
        unitProduct.setText(null);
        checkAvailability.setText(null);
    }//GEN-LAST:event_btn_CancelActionPerformed

    private void panelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelFocusLost
        Exit_Warning ew = new Exit_Warning();
        if (JOptionPane.showConfirmDialog(this, ew.panel, "  Exit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_panelFocusLost

    private void tableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyTyped
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (table.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "First Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                dtm.removeRow(table.getSelectedRow());
                getSubTotal();
                getNetTotal();
                getDiscount();
            }
        }


    }//GEN-LAST:event_tableKeyTyped

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (evt.getClickCount() == 2) {
            new Item_Discount(menu, this,
                    table.getValueAt(table.getSelectedRow(), 1).toString(),
                    Double.parseDouble(table.getValueAt(table.getSelectedRow(), 5).toString()), table.getValueAt(table.getSelectedRow(), 4).toString(), Integer.parseInt(table.getValueAt(table.getSelectedRow(), 0).toString()), Double.parseDouble(table.getValueAt(table.getSelectedRow(), 6).toString())).setVisible(true);
        } else if (evt.getClickCount() == 1) {
            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            if (table.getSelectedRow() == -1) {

            } else {
                String prid = dtm.getValueAt(table.getSelectedRow(), 2).toString();
                int qty = Integer.parseInt(dtm.getValueAt(table.getSelectedRow(), 5).toString());
                double price = 0;
                if (!prid.equals("*****")) {
                    try {
                        int totalqty = 0;
                        ResultSet rs = DB.search("SELECT product_stock.qty,product_stock.retail_price FROM product_stock WHERE product_stock.id_product='" + prid + "' ");
                        while (rs.next()) {
                            totalqty = rs.getInt(1);
                            price = rs.getDouble(2);
                        }
                        if (totalqty < 1 || qty > totalqty) {
                            JOptionPane.showMessageDialog(this, "Qty out of stock", "Error", JOptionPane.ERROR_MESSAGE);
                            dtm.setValueAt(1, table.getSelectedRow(), 5);
                        } else {
                            dtm.setValueAt(price * qty, table.getSelectedRow(), 6);
                            dtm.setValueAt("0.00", table.getSelectedRow(), 7);
                            dtm.setValueAt(price * qty, table.getSelectedRow(), 8);
                            getSubTotal();
                            getNetTotal();
                            getDiscount();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    private void add_customerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_customerActionPerformed
        AddCustomer_QuickView add = new AddCustomer_QuickView(menu, this);
        add.setVisible(true);
    }//GEN-LAST:event_add_customerActionPerformed

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (table.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "First Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                sub_total -= Double.parseDouble(dtm.getValueAt(table.getSelectedRow(), 6).toString());
                dtm.removeRow(table.getSelectedRow());
                getSubTotal();
                getDiscount();
                getNetTotal();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (table.getSelectedRow() == -1) {

            } else {
                String prid = dtm.getValueAt(table.getSelectedRow(), 2).toString();
                double qty = Double.parseDouble(dtm.getValueAt(table.getSelectedRow(), 5).toString());
                double price = 0;
                if (!prid.equals("*****")) {
                    try {
                        int totalqty = 0;
                        ResultSet rs = DB.search("SELECT product_stock.qty,product_stock.retail_price FROM product_stock WHERE product_stock.id_product='" + prid + "' ");
                        while (rs.next()) {
                            totalqty = rs.getInt(1);
                            price = rs.getDouble(2);
                        }
                        if (totalqty < 1 || qty > totalqty) {
                            JOptionPane.showMessageDialog(this, "Qty out of stock", "Error", JOptionPane.ERROR_MESSAGE);
                            dtm.setValueAt(1, table.getSelectedRow(), 5);
                        } else {
                            dtm.setValueAt(price * qty, table.getSelectedRow(), 6);
                            dtm.setValueAt("0.00", table.getSelectedRow(), 7);
                            dtm.setValueAt(price * qty, table.getSelectedRow(), 8);
                            getSubTotal();
                            getNetTotal();
                            getDiscount();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_tableKeyPressed

    private void pay_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pay_typeActionPerformed
        if (pay_type.getSelectedItem() != null && pay_type.getSelectedItem().equals("Credit")) {
            if (customer_Name.getText().equals("Default")) {
                JOptionPane.showMessageDialog(this, "This customer can't give credits", "No credit for this customer", JOptionPane.WARNING_MESSAGE);
            } else {
                balance.setEnabled(false);
                balance.setText("0.00");
                paidAmount.setEnabled(false);
                paidAmount.setText("0.00");
            }
        } else if (pay_type.getSelectedItem() != null && pay_type.getSelectedItem().equals("Various")) {
            if (customer_Name.getText().equals("Default")) {
                JOptionPane.showMessageDialog(this, "This customer can't give various payments", "No credit for this customer", JOptionPane.WARNING_MESSAGE);
            } else {
                balance.setEnabled(false);
                balance.setText("0.00");
                paidAmount.setEnabled(false);
                paidAmount.setText("0.00");
                various_payments addProduct = new various_payments(menu, this, txt_netTotal.getText());
                addProduct.setVisible(true);
            }
        } else if (pay_type.getSelectedItem() != null && pay_type.getSelectedItem().equals("Card")) {
            paidAmount.setEnabled(false);
            paidAmount.setText("0.00");
            balance.setEnabled(false);
            balance.setText("0.00");

        } else {
            balance.setEnabled(true);
            paidAmount.setEnabled(true);
            paidAmount.setText("");
            balance.setText("0.00");

        }
    }//GEN-LAST:event_pay_typeActionPerformed

    private void customer_NameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customer_NameKeyPressed
        if (evt.getKeyCode() == 40) {
            cus_namejList1.grabFocus();
            cus_namejList1.setSelectedIndex(0);
        } else if (evt.getKeyCode() == 10) {
            cus_namejScrollPane1.setVisible(false);
        }
    }//GEN-LAST:event_customer_NameKeyPressed

    private void customer_NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customer_NameKeyReleased
        if (evt.getKeyCode() != 10) {
            loadCustomers();
        }
    }//GEN-LAST:event_customer_NameKeyReleased

    private void cus_namejList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cus_namejList1KeyPressed
        if (evt.getKeyCode() == 10) {
            customer_Name.setText(cus_namejList1.getSelectedValue());
            cus_namejScrollPane1.setVisible(false);
            try {
                ResultSet rs = DB.search("SELECT id_customer from customer where CONCAT(fname,' ',lname)='" + customer_Name.getText() + "'");
                if (rs.first()) {
                    customerId = rs.getString(1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println(customerId + "aaaaaaaaaaa");
        }
    }//GEN-LAST:event_cus_namejList1KeyPressed

    private void cus_namejList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cus_namejList1MouseClicked
        customer_Name.setText(cus_namejList1.getSelectedValue());
        cus_namejScrollPane1.setVisible(false);
        try {
            ResultSet rs = DB.search("SELECT id_customer from customer where CONCAT(fname,' ',lname)='" + customer_Name.getText() + "'");
            if (rs.first()) {
                customerId = rs.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cus_namejList1MouseClicked

    private void btn_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SaveActionPerformed
        if (customerId == null) {
            JOptionPane.showMessageDialog(this, "Select the customer before save", "Select the customer", JOptionPane.WARNING_MESSAGE);
        } else {
            if (paidAmount.isEnabled() && Double.parseDouble(paidAmount.getText()) == 0) {
                JOptionPane.showMessageDialog(this, "Please enter paid amount", "Paid amount empty", JOptionPane.WARNING_MESSAGE);
            } else if (paidAmount.isEnabled() && Double.parseDouble(paidAmount.getText()) == Double.parseDouble(balance.getText())) {
                JOptionPane.showMessageDialog(this, "Paid amount is simmilar to balance", "No items for invoice", JOptionPane.WARNING_MESSAGE);
            } else if (Double.parseDouble(balance.getText()) < 0) {
                JOptionPane.showMessageDialog(this, "Please enter valid paid amount", "Invalid balance", JOptionPane.WARNING_MESSAGE);
            } else {
                if (inv_print == false) {
                    inv_print = true;
                    SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
                    String paymentType = pay_type.getSelectedItem().toString();

                    try {
                        boolean payable = true;
                        double totalcredit = 0;
                        if (paymentType.equals("Credit")) {
                            ResultSet rs = DB.search("SELECT credit_amount,credit_limit from customer where id_customer='" + customerId + "'");
                            if (rs.first()) {
                                totalcredit = Double.parseDouble(rs.getString(1)) + Double.parseDouble(txt_netTotal.getText());
                                if (totalcredit > Double.parseDouble(rs.getString(2))) {
                                    payable = false;
                                }
                            }
                            if (payable) {
                                DB.iud("UPDATE customer set credit_amount='" + totalcredit + "' where id_customer='" + customerId + "'");
                            }
                        }
                        if (payable) {
                            double discount_total = Double.parseDouble(txt_Discount.getText()) + Double.parseDouble(txt_fulldiscount.getText());
                            if (paymentType.equals("Various")) {
                                double cashpaymentbalance = cash_pay - Double.parseDouble(balance.getText());
                                DB.iud("INSERT INTO invoice VALUES('" + invoice_ID.getText() + "','" + customerId + "','" + paymentType
                                        + "','" + txt_subTotal.getText() + "','" + discount_total + "','" + txt_netTotal.getText() + "','" + cash_pay
                                        + "', '" + balance.getText() + "', '" + dateFomrmat.format(new Date()) + "', '" + time.format(new Date()) + "', '1', 'Normal')");
                                DB.iud("INSERT INTO various_payments (cash_payments,card_payments,credit_payment,invoice_id) values('" + cashpaymentbalance + "','" + card_pay + "','" + credit_pay + "','" + invoice_ID.getText() + "')");
                                DB.iud("UPDATE customer set credit_amount='" + credit_pay + "' where id_customer='" + customerId + "'");

                            } else if (paymentType.equals("Card") || paymentType.equals("Credit")) {
                                DB.iud("INSERT INTO invoice VALUES('" + invoice_ID.getText() + "','" + customerId + "','" + paymentType
                                        + "','" + txt_subTotal.getText() + "','" + discount_total + "','" + txt_netTotal.getText() + "','" + txt_netTotal.getText()
                                        + "', '" + balance.getText() + "', '" + dateFomrmat.format(new Date()) + "', '" + time.format(new Date()) + "', '1', 'Normal')");
                            } else {
                                DB.iud("INSERT INTO invoice VALUES('" + invoice_ID.getText() + "','" + customerId + "','" + paymentType
                                        + "','" + txt_subTotal.getText() + "','" + discount_total + "','" + txt_netTotal.getText() + "','" + paidAmount.getText()
                                        + "', '" + balance.getText() + "', '" + dateFomrmat.format(new Date()) + "', '" + time.format(new Date()) + "', '1', 'Normal')");
                            }
                            for (int i = 0; i < table.getRowCount(); i++) {
                                DB.iud("INSERT INTO invoice_item (id_invoice, idproduct_stock, unit, qty, discount, value) VALUES('" + invoice_ID.getText() + "','" + table.getValueAt(i, 1).toString()
                                        + "','" + table.getValueAt(i, 4).toString() + "','" + table.getValueAt(i, 5).toString() + "','" + table.getValueAt(i, 6).toString() + "', '" + table.getValueAt(i, 7).toString() + "')");

                                DB.iud("UPDATE product_stock SET qty = qty - '" + table.getValueAt(i, 5).toString() + "' WHERE idproduct_stock = '" + table.getValueAt(i, 1).toString() + "' ");

                            }
                            if (paymentType.equals("Various")) {
                                printInvoiceVarious();
                            } else {
                                printInvoice();
                            }
                            new Save().setVisible(true);
                            clearAlll();
                        } else {
                            JOptionPane.showMessageDialog(this, "Credit limit exceeded", "Warning", JOptionPane.WARNING_MESSAGE);
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    inv_print = false;
                    sub_total = 0;
                }
            }
        }
    }//GEN-LAST:event_btn_SaveActionPerformed

    private void btn_SaveMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseReleased
        btn_Save.setBackground(new Color(38, 57, 75));
    }//GEN-LAST:event_btn_SaveMouseReleased

    private void btn_SaveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMousePressed
        btn_Save.setBackground(new Color(21, 67, 96));
    }//GEN-LAST:event_btn_SaveMousePressed

    private void btn_SaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseExited
        btn_Save.setBackground(new Color(38, 57, 75));
    }//GEN-LAST:event_btn_SaveMouseExited

    private void btn_SaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseEntered
        btn_Save.setBackground(new Color(31, 97, 141));
    }//GEN-LAST:event_btn_SaveMouseEntered

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double crr_total = Double.parseDouble(txt_subTotal.getText()) - Double.parseDouble(txt_Discount.getText());
        new Item_Discount(menu, this, crr_total).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt_fulldiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_fulldiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fulldiscountActionPerformed

    private void txt_fulldiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_fulldiscountKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fulldiscountKeyReleased

    private void txt_fulldiscountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_fulldiscountKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fulldiscountKeyTyped

    private void productCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            paidAmount.grabFocus();
        } else if (evt.getKeyCode() == 40) {
            pr_codejList1.grabFocus();
            pr_codejList1.setSelectedIndex(0);
        } else if (evt.getKeyCode() == 10) {
            pr_codejScrollPane1.setVisible(false);
        }
    }//GEN-LAST:event_productCodeKeyPressed

    private void tableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseEntered

    private void productCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productCodeKeyReleased
        if (evt.getKeyCode() != 10) {
            loadPrcode();
        }
    }//GEN-LAST:event_productCodeKeyReleased

    private void pr_codejList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pr_codejList1KeyPressed
        if (evt.getKeyCode() == 10) {
            productCode.setText(pr_codejList1.getSelectedValue());
            pr_codejScrollPane1.setVisible(false);
            productData(productCode.getText());
        }
    }//GEN-LAST:event_pr_codejList1KeyPressed

    private void pr_codejList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pr_codejList1MouseClicked
        productCode.setText(pr_codejList1.getSelectedValue());
        pr_codejScrollPane1.setVisible(false);
        productData(productCode.getText());
    }//GEN-LAST:event_pr_codejList1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_customer;
    private javax.swing.JTextField balance;
    private javax.swing.JButton btn_Cancel;
    private javax.swing.JButton btn_Save;
    private javax.swing.JButton btn_find;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JLabel checkAvailability;
    private javax.swing.JList<String> cus_namejList1;
    private javax.swing.JScrollPane cus_namejScrollPane1;
    private javax.swing.JTextField customer_Name;
    private javax.swing.JLabel invoice_ID;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField paidAmount;
    public javax.swing.JPanel panel;
    private javax.swing.JComboBox<String> pay_type;
    private javax.swing.JList<String> pr_codejList1;
    private javax.swing.JScrollPane pr_codejScrollPane1;
    public javax.swing.JTextField productCode;
    private javax.swing.JLabel productName;
    public javax.swing.JTable table;
    private javax.swing.JTextField txt_Discount;
    public javax.swing.JTextField txt_fulldiscount;
    private javax.swing.JTextField txt_netTotal;
    private javax.swing.JTextField txt_subTotal;
    private javax.swing.JLabel unitProduct;
    // End of variables declaration//GEN-END:variables

    private void tableSettings() {
        JTableHeader tableHeader = table.getTableHeader();
        tableHeader.setFont(new Font("Calibri", Font.BOLD, 14));
        ((DefaultTableCellRenderer) tableHeader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer right = new DefaultTableCellRenderer();
        right.setHorizontalAlignment(JLabel.RIGHT);

        table.getColumnModel().getColumn(0).setCellRenderer(center);
        table.getColumnModel().getColumn(1).setCellRenderer(center);
        table.getColumnModel().getColumn(4).setCellRenderer(center);
        table.getColumnModel().getColumn(5).setCellRenderer(center);
        table.getColumnModel().getColumn(6).setCellRenderer(right);
        table.getColumnModel().getColumn(7).setCellRenderer(right);
        table.getColumnModel().getColumn(8).setCellRenderer(center);
    }

    private void generateID() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
        try {
            ResultSet rs = DB.search("SELECT COUNT(id_invoice) AS id FROM invoice");
            if (rs.next()) {
                int rowCount = rs.getInt("id");
                rowCount++;
                invoice_ID.setText(sdf.format(new Date()) + String.format("%0" + 5 + "d", rowCount));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadCustomers() {
        try {

            if (customer_Name.getText().isEmpty()) {
                cus_namejScrollPane1.setVisible(false);

            } else {
                ResultSet rs = DB.search("SELECT CONCAT(fname,' ',lname) FROM customer where CONCAT(fname,' ',lname) like '" + customer_Name.getText() + "%' and state = '1' ");

                boolean value = rs.next();
                if (value == false) {
                    cus_namejScrollPane1.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Invalid customer name", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                Vector v = new Vector();
                while (value) {
                    String grnid = rs.getString(1);
                    v.add(grnid);
                    cus_namejList1.setListData(v);
                    cus_namejScrollPane1.setVisible(true);

                    value = rs.next();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void productData(String productID) {
        try {
            if (productCode.getText().toLowerCase().equals("uncount")) {
                new uncount_items(menu, this).setVisible(true);
            } else if (productCode.getText().toLowerCase().equals("co1")) {
                new coconut_oil(menu, this).setVisible(true);
            } else {
                ResultSet stockData = DB.search("SELECT COUNT(product_stock.idproduct_stock) AS id, product_stock.idproduct_stock FROM product_stock WHERE product_stock.id_product='" + productCode.getText() + "' AND product_stock.qty > 0");
                if (stockData.next()) {
                    if (stockData.getInt(1) > 1) { // if more than one stocks 
                        Select_Stock s = new Select_Stock(menu, productID, this);
                        s.setVisible(true);

                    } else if (stockData.getInt(1) == 1) {
                        loadStockData(stockData.getString("idproduct_stock"));
                    } else {
                        //JOptionPane.showMessageDialog(this, "There is no stock available in this product", "Out Of Stock", JOptionPane.INFORMATION_MESSAGE);
                        productName.setText("No stock available in this product");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadStockData(String stockID) {
        try {
            ResultSet rs = DB.search("SELECT  product_stock.idproduct_stock,product.id_product,product.productname,product_stock.unit,product_stock.qty,product_stock.retail_price "
                    + "FROM product_stock INNER JOIN product ON product_stock.id_product = product.id_product WHERE product_stock.idproduct_stock = '" + stockID + "' ");

            if (rs.next()) {
                stock_id = rs.getString(1);
                product_id = rs.getString(2);
                product_name = rs.getString(3);
                product_unit = rs.getString(4);
                quantity = rs.getDouble(5);
                retailPrice = rs.getDouble(6);

                productName.setText(product_name);
                unitProduct.setText(product_unit);
//                qty.grabFocus();

                DefaultTableModel dtm = (DefaultTableModel) table.getModel();

                boolean sameProCode = true;

                for (int i = 0; i < table.getRowCount(); i++) {
                    if (table.getValueAt(i, 1).equals(stock_id) && table.getValueAt(i, 4).equals(product_unit)) {
                        sameProCode = false;
                        double addQty = 1;
                        double getQty = Double.parseDouble(table.getValueAt(i, 5).toString());
                        table.setValueAt(String.valueOf(addQty + getQty), i, 5);
                        table.setValueAt(decimalformat.format((addQty + getQty) * retailPrice), i, 6);
                        table.setValueAt(Double.parseDouble(table.getValueAt(i, 6).toString()) - Double.parseDouble(table.getValueAt(i, 7).toString()), i, 8);
                        break;
                    }
                }

                if (sameProCode) {
                    Vector v = new Vector();
                    v.add(++rowNo);
                    v.add(stock_id);
                    v.add(product_id);
                    v.add(product_name);
                    double qtydouble = 1;
                    v.add(product_unit);
                    v.add(1);
                    v.add(decimalformat.format(retailPrice * qtydouble));
                    v.add("0.00");
                    v.add(decimalformat.format(retailPrice * qtydouble));
                    dtm.addRow(v);
                }

                sub_total += retailPrice * 1;
                productCode.setText(null);
                productName.setText(null);
                unitProduct.setText(null);
                checkAvailability.setText(null);
                productCode.grabFocus();
                getSubTotal();
                getNetTotal();
                getDiscount();
                paidAmount.setText("");
                balance.setText("0.00");
                pay_type.setSelectedItem("Cash");

            } else {
                JOptionPane.showMessageDialog(this, "Product Code is wrong, try again", "Wrong Product Code...", JOptionPane.ERROR_MESSAGE);
                productCode.setText(null);
                productCode.grabFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getSubTotal() {
        double tot = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            tot += Double.parseDouble(table.getValueAt(i, 6).toString());
        }
//        txt_subTotal.setText(decimalformat.format(sub_total));
        txt_subTotal.setText(decimalformat.format(tot));
        sub_total = tot;
    }

    public void getNetTotal() {
        double pecentage = Double.parseDouble(txt_Discount.getText());
        double subAmount = Double.parseDouble(txt_subTotal.getText());
        double fulldiscount = Double.parseDouble(txt_fulldiscount.getText());
        if (fulldiscount != 0) {
            txt_netTotal.setText(decimalformat.format(sub_total - pecentage - fulldiscount));
        } else {
            txt_netTotal.setText(decimalformat.format(sub_total - pecentage));
        }
//        double netValue = ((100 - pecentage) * subAmount) / 100;

    }

    public void getDiscount() {
        double tot = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            tot += Double.parseDouble(table.getValueAt(i, 7).toString());
        }
        txt_Discount.setText(decimalformat.format(tot));
    }

    private void clearAlll() {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        generateID();
        customer_Name.setText("Default");
        dtm.setRowCount(0);
        txt_subTotal.setText("0");
        txt_Discount.setText("0");
        txt_fulldiscount.setText("0");
        txt_netTotal.setText("0");
        paidAmount.setText("0");
        balance.setText("0.00");
        customerId = "000001";
        cash_pay = 0;
        card_pay = 0;
        credit_pay = 0;
    }

    public void generatePayments() {
        paidAmount.setText("Cash= " + cash_pay + ", Card= " + card_pay + ", Credit= " + credit_pay);
        double total = cash_pay + card_pay + credit_pay;
        double nettotal = Double.parseDouble(txt_netTotal.getText());
        if (total > Double.parseDouble(txt_netTotal.getText())) {
            double balance = total - nettotal;
            this.balance.setText(decimalformat.format(balance));
        }
    }

    private void printInvoice() {
        menu.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String path = "jasperReports\\invoice_small.jasper";

            String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
            String subReportpath = (s.split("invoice_small.jasper"))[0];

            Map<String, Object> m = new HashMap();
            m.put("subPath", subReportpath); // send subReport path
            m.put("invoice_no", invoice_ID.getText());
            m.put("isPrintCopy", "");

//            JasperReport cp = JasperCompileManager.compileReport(path);
            JasperPrint fr = JasperFillManager.fillReport(path, m, DB.getConnection());
//            JasperViewer.viewReport(fr, false);
            PrintReportToPrinter(fr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        menu.setCursor(null);
    }

    private void PrintReportToPrinter(JasperPrint jp) throws JRException {
        // TODO Auto-generated method stub
        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
        // printRequestAttributeSet.add(MediaSizeName.ISO_A4); //setting page size
        printRequestAttributeSet.add(new Copies(1));

        PrinterName printerName = new PrinterName("FK80 Printer", null); //gets printer 

        PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();
        printServiceAttributeSet.add(printerName);

        JRPrintServiceExporter exporter = new JRPrintServiceExporter();

        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jp);
        exporter.setParameter(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
        exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
        exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
        exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
        exporter.exportReport();
    }

    public void openCashDrawer() {

        byte[] open = {27, 112, 0, 100, (byte) 250};
//      byte[] cutter = {29, 86,49};
        PrintService pservice
                = PrintServiceLookup.lookupDefaultPrintService();
        DocPrintJob job = pservice.createPrintJob();
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        Doc doc = new SimpleDoc(open, flavor, null);
        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
        try {
            job.print(doc, aset);
        } catch (PrintException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void printInvoiceVarious() {
        menu.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String path = "jasperReports\\invoice_small_various.jasper";

            String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
            String subReportpath = (s.split("invoice_small_various.jasper"))[0];

            Map<String, Object> m = new HashMap();
            m.put("subPath", subReportpath); // send subReport path
            m.put("invoice_no", invoice_ID.getText());
            m.put("isPrintCopy", "");

//            JasperReport cp = JasperCompileManager.compileReport(path);
            JasperPrint fr = JasperFillManager.fillReport(path, m, DB.getConnection());
//            JasperViewer.viewReport(fr, false);
            PrintReportToPrinter(fr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        menu.setCursor(null);
    }

    private void loadPrcode() {
        try {

            if (productCode.getText().isEmpty()) {
                pr_codejScrollPane1.setVisible(false);

            } else {
                ResultSet rs = DB.search("SELECT id_product FROM product where id_product like '" + productCode.getText() + "%' and state = '1' ");

                boolean value = rs.next();
                if (value == false) {
                    pr_codejScrollPane1.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Invalid Product Code", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                Vector v = new Vector();
                while (value) {
                    String grnid = rs.getString(1);
                    v.add(grnid);
                    pr_codejList1.setListData(v);
                    pr_codejScrollPane1.setVisible(true);

                    value = rs.next();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
